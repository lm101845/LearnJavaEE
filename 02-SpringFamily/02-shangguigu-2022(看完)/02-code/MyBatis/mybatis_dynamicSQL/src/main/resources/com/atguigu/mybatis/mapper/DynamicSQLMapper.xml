<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">
    <!--
        动态SQL：
        1、if，通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
        2、where
        a.若where标签中有条件成立，会自动生成where关键字
        b.会自动将where标签中内容前多余的and去掉，但是内容后多余的and无法去掉
        c.若where标签中没有任何一个条件成立，则where没有任何功能
        3、trim
        prefix、suffix：在标签中内容前面或后面添加指定内容
        prefixOverrides、suffixOverrides：在标签中内容前面或后面去掉指定内容
        4、choose、when、otherwise
        相当于java中的if...else if...else
        when至少设置一个，otherwise最多设置一个
        5、foreach
        collection：设置要循环的数组或集合
        item：用一个字符串表示数组或集合中的每一个数据
        separator：设置每次循环的数据之间的分隔符
        open：循环的所有内容以什么开始
        close：循环的所有内容以什么结束
        6、sql片段
        可以记录一段sql，在需要用的地方使用include标签进行引用
        <sql id="empColumns">
            emp_id,emp_name,age,gender,dept_id
        </sql>
        <include refid="empColumns"></include>
    -->

    <!--把所有的字段都列出来-->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>

    <!--List<Emp> getEmpByCondition(Emp emp);-->
    <!--因为这里我们不需要事先多对一，所以使用resultType就可以了-->
    <!--where可以去掉前面多余的and,但是不能去掉后面多余的and,可以使用trim标签替代-->
    <select id="getEmpByCondition" resultType="Emp">
    <!--select * from t_emp-->
    <!--
    实际工作中不推荐使用*,数据多了的话查询效率很低，因为查询的时候会先把*查询成所有字段。
    所以建议写全，但是写全的话又很麻烦，所以我们把所有字段都列出来，进行引用-->
    select <include refid="empColumns"/> from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>

            <if test="age != null and age != ''">
                age = #{age} and
            </if>

            <if test="gender != null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
</select>

<select id="getEmpByConditionTwo" resultType="Emp">
    select * from t_emp
    <where>
        <if test="empName != null and empName != ''">
            emp_name = #{empName}
        </if>

        <if test="age != null and age != ''">
            and age = #{age}
        </if>

        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </where>
</select>

<select id="getEmpByConditionOne" resultType="Emp">
    select * from t_emp where 1=1
    <if test="empName != null and empName != ''">
        and emp_name = #{empName}
    </if>

    <if test="age != null and age != ''">
        and age = #{age}
    </if>

    <if test="gender != null and gender != ''">
        and gender = #{gender}
    </if>
</select>

<!--List<Emp> getEmpByChoose(Emp emp);-->
    <!--如果第一个when成立，下面的就再也不看了，也不会判断了，所以不用加and-->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>

                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

    <!--void insertMoreEmp(@Param("emps") List<Emp> emps);-->
    <!--批量添加-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <!--一共有3种批量删除的方式 -->
    <delete id="deleteMoreEmp">
        <!--delete from t_emp where emp_id in-->
        <!--(
            <foreach collection="empIds" item="empId" separator=",">
                #{empId}
            </foreach>
        )-->


        <!--<foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>-->

        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>
</mapper>